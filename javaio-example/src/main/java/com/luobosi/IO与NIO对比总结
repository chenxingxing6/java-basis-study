java.NIO包里包括三个基本的组件
· buffer：因为NIO是基于缓冲的，所以buffer是最底层的必要类，这也是IO和NIO的根本不同，虽然stream等有buffer开头的扩展类，
但只是流的包装类，还是从流读到缓冲区，而NIO却是直接读到buffer中进行操作。
因为读取的都是字节，所以在操作文字时，要用charset类进行编解码操作。
· channel：类似于IO的stream，但是不同的是除了FileChannel，其他的channel都能以非阻塞状态运行。FileChannel执行的
是文件的操作，可以直接DMA操作内存而不依赖于CPU。其他比如socketchannel就可以在数据准备好时才进行调用。
· selector：用于分发请求到不同的channel，这样才能确保channel不处于阻塞状态就可以收发消息。

面向流与面向缓冲
    Java NIO 和 IO 之间的一个最大的区别就是，NIO 是面向缓冲区的，IO 是面向流的。Java IO 面向流意味着每次从流中读一个或
多个字节，直至读取所有字节，他们没有被缓存在任何地方。此外，他不能前后移动流中的数据。如果需要前后移动数据，还需要将它
缓存到缓冲区。Java NIO 数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，
还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。

补充一点：NIO的buffer可以使用直接内存缓冲区(MappedByteBuffer)，该缓冲区不在JVM中，性能会比JVM的缓冲区略好，不过会增加相
应的垃圾回收的负担，因为JVM缓冲区的性能已经足够好，所以除非在对缓冲有特别要求的地方使用直接缓冲区，尽量使用JVM缓冲。